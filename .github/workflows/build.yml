# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
##

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare the environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      is_changelog_pr: ${{ steps.check_changelog.outputs.is_changelog }}
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5
      
      # Check if this is a changelog-only PR
      - name: Check if changelog PR
        id: check_changelog
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ contains(github.event.pull_request.labels.*.name, 'release changelog') }}" == "true" ]]; then
            echo "is_changelog=true" >> $GITHUB_OUTPUT
            echo "This is a changelog-only PR, will skip expensive steps"
          else
            echo "is_changelog=false" >> $GITHUB_OUTPUT
          fi

      # Validate wrapper
      - name: Gradle Wrapper Validation
        if: steps.check_changelog.outputs.is_changelog != 'true'
        uses: gradle/actions/wrapper-validation@v4

      # Set up the Java environment for the next steps
      - name: Setup JBR 21
        if: steps.check_changelog.outputs.is_changelog != 'true'
        uses: actions/setup-java@v4.7.1
        with:
          distribution: 'jetbrains'
          java-version: 21
          java-package: 'jdk+jcef'
          check-latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup Gradle with cache for main branch builds
      - name: Setup Gradle
        if: steps.check_changelog.outputs.is_changelog != 'true'
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*

      # Build plugin
      - name: Build plugin
        if: steps.check_changelog.outputs.is_changelog != 'true'
        run: ./gradlew buildPlugin
      
      # Skip build for changelog PRs
      - name: Skip build for changelog PR
        if: steps.check_changelog.outputs.is_changelog == 'true'
        run: |
          echo "Skipping build for changelog-only PR"
          mkdir -p ${{ github.workspace }}/build/distributions
          echo "dummy" > ${{ github.workspace }}/build/distributions/dummy.txt

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        if: steps.check_changelog.outputs.is_changelog != 'true'
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store the already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      
      # Skip tests for changelog PRs
      - name: Skip tests for changelog PR
        if: needs.build.outputs.is_changelog_pr == 'true'
        run: |
          echo "This is a changelog-only PR, skipping tests"
          echo "All required checks pass for changelog PRs"
          exit 0

      # Check out the current repository
      - name: Fetch Sources
        if: needs.build.outputs.is_changelog_pr != 'true'
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Set up the Java environment for the next steps
      - name: Setup JBR 21
        if: needs.build.outputs.is_changelog_pr != 'true'
        uses: actions/setup-java@v4.7.1
        with:
          distribution: 'jetbrains'
          java-version: 21
          java-package: 'jdk+jcef'
          check-latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup Gradle with cache fallback strategy
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*
      
      # Run tests
      - name: Run Tests
        run: ./gradlew check -x uiTest

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Collect Tests Result of failed tests
      - name: Collect Tests Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tests-report
          path: ${{ github.workspace }}/build/test-results/test/*.xml

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v5.5.1
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS

  # Run Qodana inspections and provide the report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      
      # Skip code inspection for changelog PRs
      - name: Skip code inspection for changelog PR
        if: needs.build.outputs.is_changelog_pr == 'true'
        run: |
          echo "This is a changelog-only PR, skipping code inspection"
          echo "All required checks pass for changelog PRs"
          exit 0

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Set up the Java environment for the next steps
      - name: Setup JBR 21
        uses: actions/setup-java@v4.7.1
        with:
          distribution: 'jetbrains'
          java-version: 21
          java-package: 'jdk+jcef'
          check-latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup Gradle with cache strategy
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*

      # Run Qodana inspections -
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.2.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
          QODANA_SHOW_REPORT: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
      actions: read
    steps:
      
      # Skip plugin verification for changelog PRs
      - name: Skip plugin verification for changelog PR
        if: needs.build.outputs.is_changelog_pr == 'true'
        run: |
          echo "This is a changelog-only PR, skipping plugin verification"
          echo "All required checks pass for changelog PRs"
          exit 0

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5

      # Set up the Java environment for the next steps
      - name: Setup JBR 21
        uses: actions/setup-java@v4.7.1
        with:
          distribution: 'jetbrains'
          java-version: 21
          java-package: 'jdk+jcef'
          check-latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup Gradle with cache strategy
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Test report step
  test-report:
    name: Test Report
    needs: [ build,test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
      actions: read
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Download artifact
        uses: actions/download-artifact@v5.0.0
        id: download
        with:
          name: tests-report
          path: ~/

      - name: Generate Test Report
        uses: dorny/test-reporter@v2.1.1
        if: success() || failure()
        with:
          name: Test Report Dashboard
          reporter: java-junit
          fail-on-error: 'true'
          path: '${{steps.download.outputs.download-path}}/*.xml'

  # Prepare a draft release for GitHub Releases page for the manual verification
  # When accepted and published, the release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, test-report, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5
      
      # Set up the Java environment for the next steps
      - name: Setup JBR 21
        uses: actions/setup-java@v4.7.1
        with:
          distribution: 'jetbrains'
          java-version: 21
          java-package: 'jdk+jcef'
          check-latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup Gradle with cache strategy
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*
      
      
      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(./gradlew properties --property version --quiet --console=plain | tail -n 1 | cut -f2- -d ' ')
          RELEASE_NOTE="./build/tmp/release_note.txt"
          ./gradlew getChangelog --unreleased --no-header --quiet --console=plain --output-file=$RELEASE_NOTE
          
          gh release create $VERSION \
            --draft \
            --title $VERSION \
            --notes-file $RELEASE_NOTE
